{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/thread-item.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack:///./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Input, Row, Table } from 'reactstrap';\r\nimport { TextFormat, JhiPagination, getPaginationItemsNumber, getSortState, IPaginationBaseState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getAudits } from '../administration.reducer';\r\n\r\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport interface IAuditsPageState extends IPaginationBaseState {\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\n\r\nconst previousMonth = (): string => {\r\n  const now: Date = new Date();\r\n  const fromDate =\r\n    now.getMonth() === 0\r\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\r\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\r\n  return fromDate.toISOString().slice(0, 10);\r\n};\r\n\r\nconst today = (): string => {\r\n  // Today + 1 day - needed if the current day must be included\r\n  const day: Date = new Date();\r\n  day.setDate(day.getDate() + 1);\r\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\r\n  return toDate.toISOString().slice(0, 10);\r\n};\r\n\r\nexport class AuditsPage extends React.Component<IAuditsPageProps, IAuditsPageState> {\r\n  state: IAuditsPageState = {\r\n    ...getSortState(this.props.location, ITEMS_PER_PAGE),\r\n    fromDate: previousMonth(),\r\n    toDate: today()\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getAudits();\r\n  }\r\n\r\n  onChangeFromDate = evt => {\r\n    this.setState(\r\n      {\r\n        fromDate: evt.target.value\r\n      },\r\n      () => this.getAudits()\r\n    );\r\n  };\r\n  onChangeToDate = evt => {\r\n    this.setState(\r\n      {\r\n        toDate: evt.target.value\r\n      },\r\n      () => this.getAudits()\r\n    );\r\n  };\r\n\r\n  sort = prop => () => {\r\n    this.setState(\r\n      {\r\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n        sort: prop\r\n      },\r\n      () => this.transition()\r\n    );\r\n  };\r\n\r\n  transition = () => {\r\n    this.getAudits();\r\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n  };\r\n\r\n  handlePagination = activePage => this.setState({ activePage }, () => this.transition());\r\n\r\n  getAudits = () => {\r\n    const { activePage, itemsPerPage, sort, order, fromDate, toDate } = this.state;\r\n    this.props.getAudits(activePage - 1, itemsPerPage, `${sort},${order}`, fromDate, toDate);\r\n  };\r\n\r\n  render() {\r\n    const { audits, totalItems } = this.props;\r\n    const { fromDate, toDate } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 className=\"audits-page-heading\">Audits</h2>\r\n        <span>from</span>\r\n        <Input type=\"date\" value={fromDate} onChange={this.onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\r\n        <span>to</span>\r\n        <Input type=\"date\" value={toDate} onChange={this.onChangeToDate} name=\"toDate\" id=\"toDate\" />\r\n        <Table striped responsive>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={this.sort('auditEventDate')}>\r\n                Date\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={this.sort('principal')}>\r\n                User\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={this.sort('auditEventType')}>\r\n                State\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th>Extra data</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {audits.map((audit, i) => (\r\n              <tr key={`audit-${i}`}>\r\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\r\n                <td>{audit.principal}</td>\r\n                <td>{audit.type}</td>\r\n                <td>\r\n                  {audit.data ? audit.data.message : null}\r\n                  {audit.data ? audit.data.remoteAddress : null}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiPagination\r\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\r\n            activePage={this.state.activePage}\r\n            onSelect={this.handlePagination}\r\n            maxButtons={5}\r\n          />\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  audits: storeState.administration.audits,\r\n  totalItems: storeState.administration.totalItems\r\n});\r\n\r\nconst mapDispatchToProps = { getAudits };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AuditsPage);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\r\n\r\nimport { getConfigurations, getEnv } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IConfigurationPageState {\r\n  filter: string;\r\n  reversePrefix: boolean;\r\n  reverseProperties: boolean;\r\n}\r\n\r\nexport class ConfigurationPage extends React.Component<IConfigurationPageProps, IConfigurationPageState> {\r\n  state: IConfigurationPageState = {\r\n    filter: '',\r\n    reversePrefix: false,\r\n    reverseProperties: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getConfigurations();\r\n    this.props.getEnv();\r\n  }\r\n\r\n  setFilter = evt => {\r\n    this.setState({\r\n      filter: evt.target.value\r\n    });\r\n  };\r\n\r\n  envFilterFn = configProp => configProp.toUpperCase().includes(this.state.filter.toUpperCase());\r\n  propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(this.state.filter.toUpperCase());\r\n\r\n  reversePrefix = () => {\r\n    this.setState({\r\n      reversePrefix: !this.state.reversePrefix\r\n    });\r\n  };\r\n\r\n  reverseProperties = () => {\r\n    this.setState({\r\n      reverseProperties: !this.state.reverseProperties\r\n    });\r\n  };\r\n\r\n  getContextList = contexts =>\r\n    Object.values(contexts)\r\n      .map((v: any) => v.beans)\r\n      .reduce((acc, e) => ({ ...acc, ...e }));\r\n\r\n  render() {\r\n    const { configuration } = this.props;\r\n    const { filter } = this.state;\r\n    const configProps = configuration && configuration.configProps ? configuration.configProps : {};\r\n    const env = configuration && configuration.env ? configuration.env : {};\r\n    return (\r\n      <div>\r\n        <h2 className=\"configuration-page-heading\">Configuration</h2>\r\n        <span>Filter</span> <Input type=\"search\" value={filter} onChange={this.setFilter} name=\"search\" id=\"search\" />\r\n        <label>Spring configuration</label>\r\n        <Table className=\"table table-striped table-bordered table-responsive d-table\">\r\n          <thead>\r\n            <tr>\r\n              <th onClick={this.reversePrefix}>Prefix</th>\r\n              <th onClick={this.reverseProperties}>Properties</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {configProps.contexts\r\n              ? Object.values(this.getContextList(configProps.contexts))\r\n                  .filter(this.propsFilterFn)\r\n                  .map((property, propIndex) => (\r\n                    <tr key={propIndex}>\r\n                      <td>{property['prefix']}</td>\r\n                      <td>\r\n                        {Object.keys(property['properties']).map((propKey, index) => (\r\n                          <Row key={index}>\r\n                            <Col md=\"4\">{propKey}</Col>\r\n                            <Col md=\"8\">\r\n                              <Badge className=\"float-right badge-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\r\n                            </Col>\r\n                          </Row>\r\n                        ))}\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n        {env.propertySources\r\n          ? env.propertySources.map((envKey, envIndex) => (\r\n              <div key={envIndex}>\r\n                <h4>\r\n                  <span>{envKey.name}</span>\r\n                </h4>\r\n                <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\r\n                  <thead>\r\n                    <tr key={envIndex}>\r\n                      <th className=\"w-40\">Property</th>\r\n                      <th className=\"w-60\">Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.keys(envKey.properties)\r\n                      .filter(this.envFilterFn)\r\n                      .map((propKey, propIndex) => (\r\n                        <tr key={propIndex}>\r\n                          <td className=\"break\">{propKey}</td>\r\n                          <td className=\"break\">\r\n                            <span className=\"float-right badge badge-secondary break\">{envKey.properties[propKey].value}</span>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n            ))\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  configuration: administration.configuration,\r\n  isFetching: administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { getConfigurations, getEnv };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConfigurationPage);\r\n","import React from 'react';\r\n\r\nconst DocsPage = () => (\r\n  <div>\r\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\r\n  </div>\r\n);\r\n\r\nexport default DocsPage;\r\n","import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nconst formatDiskSpaceOutput = rawValue => {\r\n  // Should display storage space in an human readable unit\r\n  const val = rawValue / 1073741824;\r\n  if (val > 1) {\r\n    // Value\r\n    return val.toFixed(2) + ' GB';\r\n  } else {\r\n    return (rawValue / 1048576).toFixed(2) + ' MB';\r\n  }\r\n};\r\n\r\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\r\n  const data = healthObject.details || {};\r\n  return (\r\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\r\n      <ModalBody>\r\n        <Table bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(data).map((key, index) => (\r\n              <tr key={index}>\r\n                <td>{key}</td>\r\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default HealthModal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\n\r\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IHealthPageState {\r\n  healthObject: any;\r\n  showModal: boolean;\r\n}\r\n\r\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\r\n  state: IHealthPageState = {\r\n    healthObject: {},\r\n    showModal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.systemHealth();\r\n  }\r\n\r\n  getSystemHealth = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.systemHealth();\r\n    }\r\n  };\r\n\r\n  getSystemHealthInfo = (name, healthObject) => () => {\r\n    this.setState({\r\n      showModal: true,\r\n      healthObject: {\r\n        ...healthObject,\r\n        name\r\n      }\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showModal: false\r\n    });\r\n  };\r\n\r\n  renderModal = () => {\r\n    const { healthObject } = this.state;\r\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\r\n  };\r\n\r\n  render() {\r\n    const { health, isFetching } = this.props;\r\n    const data = (health || {}).details || {};\r\n    return (\r\n      <div>\r\n        <h2 className=\"health-page-heading\">Health Checks</h2>\r\n        <p>\r\n          <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\r\n          </Button>\r\n        </p>\r\n        <Row>\r\n          <Col md=\"12\">\r\n            <Table bordered>\r\n              <thead>\r\n                <tr>\r\n                  <th>Service Name</th>\r\n                  <th>Status</th>\r\n                  <th>Details</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(data).map(\r\n                  (configPropKey, configPropIndex) =>\r\n                    configPropKey !== 'status' ? (\r\n                      <tr key={configPropIndex}>\r\n                        <td>{configPropKey}</td>\r\n                        <td>\r\n                          <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\r\n                        </td>\r\n                        <td>\r\n                          {data[configPropKey].details ? (\r\n                            <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\r\n                              <FontAwesomeIcon icon=\"eye\" />\r\n                            </a>\r\n                          ) : null}\r\n                        </td>\r\n                      </tr>\r\n                    ) : null\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n        {this.renderModal()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  health: storeState.administration.health,\r\n  isFetching: storeState.administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { systemHealth };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HealthPage);\r\n","import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport Logs from './logs/logs';\r\nimport Health from './health/health';\r\nimport Metrics from './metrics/metrics';\r\nimport Configuration from './configuration/configuration';\r\nimport Audits from './audits/audits';\r\nimport Docs from './docs/docs';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface ILogsPageState {\r\n  filter: string;\r\n}\r\n\r\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\r\n  state: ILogsPageState = {\r\n    filter: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getLoggers();\r\n  }\r\n\r\n  getLogs = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.getLoggers();\r\n    }\r\n  };\r\n\r\n  changeLevel = (loggerName, level) => () => {\r\n    this.props.changeLogLevel(loggerName, level);\r\n  };\r\n\r\n  setFilter = evt => {\r\n    this.setState({\r\n      filter: evt.target.value\r\n    });\r\n  };\r\n\r\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\r\n\r\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\r\n\r\n  render() {\r\n    const { logs, isFetching } = this.props;\r\n    const { filter } = this.state;\r\n    const loggers = logs ? logs.loggers : [];\r\n    return (\r\n      <div>\r\n        <h2 className=\"logs-page-heading\">Logs</h2>\r\n        <p>There are {loggers.length.toString()} loggers.</p>\r\n\r\n        <span>Filter</span>\r\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\r\n\r\n        <table className=\"table table-sm table-striped table-bordered\">\r\n          <thead>\r\n            <tr title=\"click to order\">\r\n              <th>\r\n                <span>Name</span>\r\n              </th>\r\n              <th>\r\n                <span>Level</span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loggers.filter(this.filterFn).map((logger, i) => (\r\n              <tr key={`log-row-${i}`}>\r\n                <td>\r\n                  <small>{logger.name}</small>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\r\n                    className={this.getClassName(logger.level, 'TRACE', 'primary')}\r\n                  >\r\n                    TRACE\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\r\n                    className={this.getClassName(logger.level, 'DEBUG', 'success')}\r\n                  >\r\n                    DEBUG\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'INFO')}\r\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\r\n                  >\r\n                    INFO\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'WARN')}\r\n                    className={this.getClassName(logger.level, 'WARN', 'warning')}\r\n                  >\r\n                    WARN\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\r\n                    className={this.getClassName(logger.level, 'ERROR', 'danger')}\r\n                  >\r\n                    ERROR\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'OFF')}\r\n                    className={this.getClassName(logger.level, 'OFF', 'secondary')}\r\n                  >\r\n                    OFF\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  logs: administration.logs,\r\n  isFetching: administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LogsPage);\r\n","import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button, Input, Badge, Row } from 'reactstrap';\r\n\r\nimport ThreadItem from './thread-item';\r\n\r\nexport interface IMetricsModalProps {\r\n  showModal: boolean;\r\n  handleClose: Function;\r\n  threadDump: any;\r\n}\r\n\r\nexport interface IMetricsModalState {\r\n  badgeFilter: string;\r\n  searchFilter: string;\r\n}\r\n\r\nexport class MetricsModal extends React.Component<IMetricsModalProps, IMetricsModalState> {\r\n  state: IMetricsModalState = {\r\n    badgeFilter: '',\r\n    searchFilter: ''\r\n  };\r\n\r\n  computeFilteredList = () => {\r\n    const { badgeFilter, searchFilter } = this.state;\r\n    let filteredList = this.props.threadDump.threads;\r\n    if (badgeFilter !== '') {\r\n      filteredList = filteredList.filter(t => t.threadState === badgeFilter);\r\n    }\r\n    if (searchFilter !== '') {\r\n      filteredList = filteredList.filter(t => t.lockName && t.lockName.toLowerCase().includes(searchFilter.toLowerCase()));\r\n    }\r\n    return filteredList;\r\n  };\r\n\r\n  computeCounters = () => {\r\n    let threadDumpAll = 0;\r\n    let threadDumpRunnable = 0;\r\n    let threadDumpWaiting = 0;\r\n    let threadDumpTimedWaiting = 0;\r\n    let threadDumpBlocked = 0;\r\n\r\n    this.props.threadDump.threads.forEach(t => {\r\n      switch (t.threadState) {\r\n        case 'RUNNABLE':\r\n          threadDumpRunnable++;\r\n          break;\r\n        case 'WAITING':\r\n          threadDumpWaiting++;\r\n          break;\r\n        case 'TIMED_WAITING':\r\n          threadDumpTimedWaiting++;\r\n          break;\r\n        case 'BLOCKED':\r\n          threadDumpBlocked++;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    threadDumpAll = threadDumpRunnable + threadDumpWaiting + threadDumpTimedWaiting + threadDumpBlocked;\r\n    return { threadDumpAll, threadDumpRunnable, threadDumpWaiting, threadDumpTimedWaiting, threadDumpBlocked };\r\n  };\r\n\r\n  getBadgeClass = threadState => {\r\n    if (threadState === 'RUNNABLE') {\r\n      return 'badge-success';\r\n    } else if (threadState === 'WAITING') {\r\n      return 'badge-info';\r\n    } else if (threadState === 'TIMED_WAITING') {\r\n      return 'badge-warning';\r\n    } else if (threadState === 'BLOCKED') {\r\n      return 'badge-danger';\r\n    }\r\n  };\r\n\r\n  updateBadgeFilter = badge => () => this.setState({ badgeFilter: badge });\r\n\r\n  updateSearchFilter = event => this.setState({ searchFilter: event.target.value });\r\n\r\n  render() {\r\n    const { showModal, handleClose, threadDump } = this.props;\r\n    let counters = {} as any;\r\n    let filteredList = null;\r\n    if (threadDump && threadDump.threads) {\r\n      counters = this.computeCounters();\r\n      filteredList = this.computeFilteredList();\r\n    }\r\n\r\n    return (\r\n      <Modal isOpen={showModal} toggle={handleClose} className=\"modal-lg\">\r\n        <ModalHeader toggle={handleClose}>Threads dump</ModalHeader>\r\n        <ModalBody>\r\n          <Badge color=\"primary\" className=\"hand\" onClick={this.updateBadgeFilter('')}>\r\n            All&nbsp;\r\n            <Badge pill>{counters.threadDumpAll || 0}</Badge>\r\n          </Badge>&nbsp;\r\n          <Badge color=\"success\" className=\"hand\" onClick={this.updateBadgeFilter('RUNNABLE')}>\r\n            Runnable&nbsp;\r\n            <Badge pill>{counters.threadDumpRunnable || 0}</Badge>\r\n          </Badge>&nbsp;\r\n          <Badge color=\"info\" className=\"hand\" onClick={this.updateBadgeFilter('WAITING')}>\r\n            Waiting&nbsp;\r\n            <Badge pill>{counters.threadDumpWaiting || 0}</Badge>\r\n          </Badge>&nbsp;\r\n          <Badge color=\"warning\" className=\"hand\" onClick={this.updateBadgeFilter('TIMED_WAITING')}>\r\n            Timed Waiting&nbsp;\r\n            <Badge pill>{counters.threadDumpTimedWaiting || 0}</Badge>\r\n          </Badge>&nbsp;\r\n          <Badge color=\"danger\" className=\"hand\" onClick={this.updateBadgeFilter('BLOCKED')}>\r\n            Blocked&nbsp;\r\n            <Badge pill>{counters.threadDumpBlocked || 0}</Badge>\r\n          </Badge>&nbsp;\r\n          <div className=\"mt-2\">&nbsp;</div>\r\n          <Input type=\"text\" className=\"form-control\" placeholder=\"Filter by Lock Name...\" onChange={this.updateSearchFilter} />\r\n          <div style={{ padding: '10px' }}>\r\n            {filteredList\r\n              ? filteredList.map((threadDumpInfo, i) => (\r\n                  <div key={`dump-${i}`}>\r\n                    <h6>\r\n                      {' '}\r\n                      <span className={'badge ' + this.getBadgeClass(threadDumpInfo.threadState)}>{threadDumpInfo.threadState}</span>&nbsp;\r\n                      {threadDumpInfo.threadName} (ID {threadDumpInfo.threadId})&nbsp;\r\n                    </h6>\r\n                    <ThreadItem threadDumpInfo={threadDumpInfo} />\r\n                    <Row>\r\n                      <Table responsive>\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Blocked Time</th>\r\n                            <th>Blocked Count</th>\r\n                            <th>Waited Time</th>\r\n                            <th>Waited Count</th>\r\n                            <th>Lock Name</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr key={threadDumpInfo.lockName}>\r\n                            <td>{threadDumpInfo.blockedTime}</td>\r\n                            <td>{threadDumpInfo.blockedCount}</td>\r\n                            <td>{threadDumpInfo.waitedTime}</td>\r\n                            <td>{threadDumpInfo.waitedCount}</td>\r\n                            <td className=\"thread-dump-modal-lock\" title={threadDumpInfo.lockName}>\r\n                              <code>{threadDumpInfo.lockName}</code>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </Table>\r\n                    </Row>\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetricsModal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Progress, Col, Row, Button } from 'reactstrap';\r\nimport { TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_WHOLE_NUMBER_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT } from 'app/config/constants';\r\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\r\nimport MetricsModal from './metrics-modal';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IMetricsPageState {\r\n  showModal: boolean;\r\n}\r\n\r\nexport class MetricsPage extends React.Component<IMetricsPageProps, IMetricsPageState> {\r\n  state: IMetricsPageState = {\r\n    showModal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.systemMetrics();\r\n  }\r\n\r\n  getMetrics = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.systemMetrics();\r\n    }\r\n  };\r\n\r\n  getThreadDump = () => {\r\n    this.props.systemThreadDump();\r\n    this.setState({\r\n      showModal: true\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showModal: false\r\n    });\r\n  };\r\n\r\n  filterNaN = input => (isNaN(input) ? 0 : input);\r\n\r\n  getStats = metrics => {\r\n    const stat = {\r\n      servicesStats: {},\r\n      cachesStats: {}\r\n    };\r\n    if (!this.props.isFetching && metrics && metrics.timers) {\r\n      Object.keys(metrics.timers).forEach((key, indexNm) => {\r\n        if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\r\n          stat.servicesStats[key] = metrics.timers[key];\r\n        }\r\n        if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\r\n          // remove gets or puts\r\n          const index = key.lastIndexOf('.');\r\n          const newKey = key.substr(0, index);\r\n          // Keep the name of the domain\r\n          stat.cachesStats[newKey] = {\r\n            name: newKey,\r\n            value: metrics.timers[key]\r\n          };\r\n        }\r\n      });\r\n    }\r\n    return stat;\r\n  };\r\n\r\n  gaugeRow = (metrics, label: String, key) =>\r\n    metrics.gauges[key] ? (\r\n      <Row>\r\n        <Col md=\"9\">{label}</Col>\r\n        <Col md=\"3\" className=\"text-right\">\r\n          {metrics.gauges[key].value}\r\n        </Col>\r\n      </Row>\r\n    ) : null;\r\n\r\n  renderModal = () => <MetricsModal handleClose={this.handleClose} showModal={this.state.showModal} threadDump={this.props.threadDump} />;\r\n\r\n  renderGauges = metrics => (\r\n    <Row>\r\n      <Col sm=\"12\">\r\n        <h3>JVM Metrics</h3>\r\n        <Row>\r\n          <Col md=\"4\">\r\n            <b>Memory</b>\r\n            <p>\r\n              <span>Total Memory</span> (\r\n              <TextFormat value={metrics.gauges['jvm.memory.total.used'].value / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n              M /{' '}\r\n              <TextFormat value={metrics.gauges['jvm.memory.total.max'].value / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n              M)\r\n            </p>\r\n            <Progress\r\n              animated\r\n              value={metrics.gauges['jvm.memory.total.used'].value}\r\n              min=\"0\"\r\n              max={metrics.gauges['jvm.memory.total.max'].value}\r\n              color=\"success\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.memory.total.used'].value * 100) / metrics.gauges['jvm.memory.total.max'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n            <p>\r\n              <span>Heap Memory</span> (\r\n              <TextFormat value={metrics.gauges['jvm.memory.heap.used'].value / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n              M /{' '}\r\n              <TextFormat value={metrics.gauges['jvm.memory.heap.max'].value / 1048576} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n              M)\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              max={metrics.gauges['jvm.memory.heap.max'].value}\r\n              value={metrics.gauges['jvm.memory.heap.used'].value}\r\n              color=\"success\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.memory.heap.used'].value * 100) / metrics.gauges['jvm.memory.heap.max'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n\r\n            <p>\r\n              <span>Non-Heap Memory</span> (\r\n              <TextFormat\r\n                value={metrics.gauges['jvm.memory.non-heap.used'].value / 1048576}\r\n                type=\"number\"\r\n                format={APP_WHOLE_NUMBER_FORMAT}\r\n              />\r\n              M /{' '}\r\n              <TextFormat\r\n                value={metrics.gauges['jvm.memory.non-heap.committed'].value / 1048576}\r\n                type=\"number\"\r\n                format={APP_WHOLE_NUMBER_FORMAT}\r\n              />\r\n              M)\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              max={metrics.gauges['jvm.memory.non-heap.committed'].value}\r\n              value={metrics.gauges['jvm.memory.non-heap.used'].value}\r\n              color=\"success\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.memory.non-heap.used'].value * 100) / metrics.gauges['jvm.memory.non-heap.committed'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <b>Threads</b> (Total: {metrics.gauges['jvm.threads.count'].value}){' '}\r\n            <Button color=\"link\" className=\"hand\" onClick={this.getThreadDump}>\r\n              <FontAwesomeIcon icon=\"eye\" />\r\n            </Button>\r\n            <p>\r\n              <span>Runnable</span> {metrics.gauges['jvm.threads.runnable.count'].value}\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              value={metrics.gauges['jvm.threads.runnable.count'].value}\r\n              max={metrics.gauges['jvm.threads.count'].value}\r\n              color=\"success\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.threads.runnable.count'].value * 100) / metrics.gauges['jvm.threads.count'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n            <p>\r\n              <span>Timed Waiting</span> ({metrics.gauges['jvm.threads.timed_waiting.count'].value})\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              value={metrics.gauges['jvm.threads.timed_waiting.count'].value}\r\n              max={metrics.gauges['jvm.threads.count'].value}\r\n              color=\"warning\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.threads.timed_waiting.count'].value * 100) / metrics.gauges['jvm.threads.count'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n            <p>\r\n              <span>Waiting</span> ({metrics.gauges['jvm.threads.waiting.count'].value})\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              value={metrics.gauges['jvm.threads.waiting.count'].value}\r\n              max={metrics.gauges['jvm.threads.count'].value}\r\n              color=\"warning\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.threads.waiting.count'].value * 100) / metrics.gauges['jvm.threads.count'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n            <p>\r\n              <span>Blocked</span> ({metrics.gauges['jvm.threads.blocked.count'].value})\r\n            </p>\r\n            <Progress\r\n              animated\r\n              min=\"0\"\r\n              value={metrics.gauges['jvm.threads.blocked.count'].value}\r\n              max={metrics.gauges['jvm.threads.count'].value}\r\n              color=\"success\"\r\n            >\r\n              <span>\r\n                <TextFormat\r\n                  value={(metrics.gauges['jvm.threads.blocked.count'].value * 100) / metrics.gauges['jvm.threads.count'].value}\r\n                  type=\"number\"\r\n                  format={APP_WHOLE_NUMBER_FORMAT}\r\n                />\r\n                %\r\n              </span>\r\n            </Progress>\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <b>Garbage collections</b>\r\n            {this.gaugeRow(metrics, 'Mark Sweep count', 'jvm.garbage.PS-MarkSweep.count')}\r\n            {this.gaugeRow(metrics, 'Mark Sweep time', 'jvm.garbage.PS-MarkSweep.time')}\r\n            {this.gaugeRow(metrics, 'Scavenge count', 'jvm.garbage.PS-Scavenge.count')}\r\n            {this.gaugeRow(metrics, 'Scavenge time', 'jvm.garbage.PS-Scavenge.time')}\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n\r\n  render() {\r\n    const { metrics, isFetching } = this.props;\r\n    const data = metrics || {};\r\n    const { servicesStats, cachesStats } = this.getStats(data);\r\n    return (\r\n      <div>\r\n        <h2 className=\"metrics-page-heading\">Application Metrics</h2>\r\n        <p>\r\n          <Button onClick={this.getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\r\n          </Button>\r\n        </p>\r\n        <hr />\r\n        {metrics.gauges ? this.renderGauges(metrics) : ''}\r\n\r\n        {metrics.meters && metrics.timers ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <h3>HTTP requests (events per second)</h3>\r\n              <p>\r\n                <span>Active requests:</span>{' '}\r\n                <b>\r\n                  <TextFormat\r\n                    value={metrics.counters['com.codahale.metrics.servlet.InstrumentedFilter.activeRequests'].count}\r\n                    type=\"number\"\r\n                    format={APP_WHOLE_NUMBER_FORMAT}\r\n                  />\r\n                </b>{' '}\r\n                - <span>Total requests:</span>{' '}\r\n                <b>\r\n                  <TextFormat\r\n                    value={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\r\n                    type=\"number\"\r\n                    format={APP_WHOLE_NUMBER_FORMAT}\r\n                  />\r\n                </b>\r\n              </p>\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Code</th>\r\n                    <th>Count</th>\r\n                    <th className=\"text-right\">Mean</th>\r\n                    <th className=\"text-right\">\r\n                      <span>Average</span> (1 min)\r\n                    </th>\r\n                    <th className=\"text-right\">\r\n                      <span>Average</span> (5 min)\r\n                    </th>\r\n                    <th className=\"text-right\">\r\n                      <span>Average</span> (15 min)\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr key={0}>\r\n                    <td>OK</td>\r\n                    <td>\r\n                      <Progress\r\n                        min=\"0\"\r\n                        max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\r\n                        value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count}\r\n                        color=\"success\"\r\n                        animated\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].mean_rate)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m1_rate)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m5_rate)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m15_rate)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                  <tr key={1}>\r\n                    <td>Not Found</td>\r\n                    <td>\r\n                      <Progress\r\n                        min=\"0\"\r\n                        max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\r\n                        value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count}\r\n                        color=\"success\"\r\n                        animated\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].mean_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m1_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m5_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m15_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                  <tr key={2}>\r\n                    <td>Server Error</td>\r\n                    <td>\r\n                      <Progress\r\n                        min=\"0\"\r\n                        max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\r\n                        value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count}\r\n                        color=\"success\"\r\n                        animated\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].mean_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m1_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m5_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(\r\n                          metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m15_rate\r\n                        )}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {servicesStats ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <h3>Services statistics (time in millisecond)</h3>\r\n            </Col>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Service name</th>\r\n                  <th>Count</th>\r\n                  <th>Mean</th>\r\n                  <th>Min</th>\r\n                  <th>p50</th>\r\n                  <th>p75</th>\r\n                  <th>p95</th>\r\n                  <th>p99</th>\r\n                  <th>Max</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(servicesStats).map((key, index) => (\r\n                  <tr key={key}>\r\n                    <td>{key}</td>\r\n                    <td>{servicesStats[key].count}</td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].mean * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].min * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].p50 * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].p75 * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].p95 * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].p99 * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat value={servicesStats[key].max * 1024} type=\"number\" format={APP_WHOLE_NUMBER_FORMAT} />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {cachesStats ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <h3>Ehcache statistics</h3>\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Cache Name</th>\r\n                    <th>Object</th>\r\n                    <th>Misses</th>\r\n                    <th>Eviction Count</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.keys(cachesStats).map((k, v) => (\r\n                    <tr key={k}>\r\n                      <td>{k}</td>\r\n                      <td>{metrics.gauges[`${k}.objects`].value}</td>\r\n                      <td>{metrics.gauges[`${k}.hits`].value}</td>\r\n                      <td>{metrics.gauges[`${k}.misses`].value}</td>\r\n                      <td>{metrics.gauges[`${k}.eviction-count`].value}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {metrics.gauges &&\r\n        metrics.gauges['HikariPool-1.pool.TotalConnections'] &&\r\n        metrics.gauges['HikariPool-1.pool.TotalConnections'].value > 0 ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <h3>DataSource statistics (time in millisecond)</h3>\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>\r\n                      <span>Usage</span>\r\n                      ({metrics.gauges['HikariPool-1.pool.ActiveConnections'].value} /{' '}\r\n                      {metrics.gauges['HikariPool-1.pool.TotalConnections'].value})\r\n                    </th>\r\n                    <th className=\"text-right\">Count</th>\r\n                    <th className=\"text-right\">Mean</th>\r\n                    <th className=\"text-right\">Min</th>\r\n                    <th className=\"text-right\">p50</th>\r\n                    <th className=\"text-right\">p75</th>\r\n                    <th className=\"text-right\">p95</th>\r\n                    <th className=\"text-right\">p99</th>\r\n                    <th className=\"text-right\">Max</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr key=\"DB\">\r\n                    <td>\r\n                      <Progress\r\n                        min=\"0\"\r\n                        max={metrics.gauges['HikariPool-1.pool.TotalConnections'].value}\r\n                        value={metrics.gauges['HikariPool-1.pool.ActiveConnections'].value}\r\n                      >\r\n                        <span>\r\n                          <TextFormat\r\n                            value={\r\n                              (metrics.gauges['HikariPool-1.pool.ActiveConnections'].value * 100) /\r\n                              metrics.gauges['HikariPool-1.pool.TotalConnections'].value\r\n                            }\r\n                            type=\"number\"\r\n                            format={APP_WHOLE_NUMBER_FORMAT}\r\n                          />\r\n                          %\r\n                        </span>\r\n                      </Progress>\r\n                    </td>\r\n                    <td className=\"text-right\">{metrics.histograms['HikariPool-1.pool.Usage'].count}</td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].mean)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].min)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p50)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p75)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p95)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p99)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <TextFormat\r\n                        value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].max)}\r\n                        type=\"number\"\r\n                        format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {this.renderModal()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  metrics: storeState.administration.metrics,\r\n  isFetching: storeState.administration.loading,\r\n  threadDump: storeState.administration.threadDump\r\n});\r\n\r\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MetricsPage);\r\n","import React from 'react';\r\nimport { Collapse, Card, CardBody, Row } from 'reactstrap';\r\n\r\nexport interface IThreadItemProps {\r\n  threadDumpInfo: any;\r\n}\r\n\r\nexport interface IThreadItemState {\r\n  collapse: boolean;\r\n}\r\n\r\nexport class ThreadItem extends React.Component<IThreadItemProps, IThreadItemState> {\r\n  state: IThreadItemState = {\r\n    collapse: false\r\n  };\r\n\r\n  toggleStackTrace = () => {\r\n    this.setState({\r\n      collapse: !this.state.collapse\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { threadDumpInfo } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <a onClick={this.toggleStackTrace} style={{ color: 'hotpink' }}>\r\n          {this.state.collapse ? <span>Hide StackTrace</span> : <span>Show StackTrace</span>}\r\n        </a>\r\n        <Collapse isOpen={this.state.collapse}>\r\n          <Card>\r\n            <CardBody>\r\n              <Row className=\"break\" style={{ overflowX: 'scroll' }}>\r\n                {Object.entries(threadDumpInfo.stackTrace).map(([stK, stV]: [string, any]) => (\r\n                  <samp key={`detail-${stK}`}>\r\n                    {stV.className}.{stV.methodName}\r\n                    <code>\r\n                      ({stV.fileName}:{stV.lineNumber})\r\n                    </code>\r\n                  </samp>\r\n                ))}\r\n                <span className=\"mt-1\" />\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadItem;\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport UserManagementDetail from './user-management-detail';\r\nimport UserManagementUpdate from './user-management-update';\r\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\r\n\r\nconst Routes = ({ match }) => (\r\n  <>\r\n    <Switch>\r\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\r\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\r\n    </Switch>\r\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\r\n  </>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport { ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IUser } from 'app/shared/model/user.model';\r\nimport { getUser, deleteUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\r\n  componentDidMount() {\r\n    this.props.getUser(this.props.match.params.login);\r\n  }\r\n\r\n  confirmDelete = event => {\r\n    this.props.deleteUser(this.props.user.login);\r\n    this.handleClose(event);\r\n  };\r\n\r\n  handleClose = event => {\r\n    event.stopPropagation();\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <Modal isOpen toggle={this.handleClose}>\r\n        <ModalHeader toggle={this.handleClose}>Confirm delete operation</ModalHeader>\r\n        <ModalBody>Are you sure you want to delete this User?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={this.handleClose}>\r\n            <FontAwesomeIcon icon=\"ban\" />&nbsp; Cancel\r\n          </Button>\r\n          <Button color=\"danger\" onClick={this.confirmDelete}>\r\n            <FontAwesomeIcon icon=\"trash\" />&nbsp; Delete\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, deleteUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementDeleteDialog);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Badge } from 'reactstrap';\r\nimport { ICrudGetAction, TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { IUser } from 'app/shared/model/user.model';\r\nimport { getUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport class UserManagementDetail extends React.Component<IUserManagementDetailProps> {\r\n  componentDidMount() {\r\n    this.props.getUser(this.props.match.params.login);\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <div>\r\n        <h2>\r\n          User [<b>{user.login}</b>]\r\n        </h2>\r\n        <Row size=\"md\">\r\n          <dl className=\"jh-entity-details\">\r\n            <dt>Login</dt>\r\n            <dd>\r\n              <span>{user.login}</span>&nbsp;\r\n              {user.activated ? <Badge color=\"success\">Activated</Badge> : <Badge color=\"danger\">Deactivated</Badge>}\r\n            </dd>\r\n            <dt>First Name</dt>\r\n            <dd>{user.firstName}</dd>\r\n            <dt>Last Name</dt>\r\n            <dd>{user.lastName}</dd>\r\n            <dt>Email</dt>\r\n            <dd>{user.email}</dd>\r\n            <dt>Created By</dt>\r\n            <dd>{user.createdBy}</dd>\r\n            <dt>Created Date</dt>\r\n            <dd>\r\n              <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            </dd>\r\n            <dt>Last Modified By</dt>\r\n            <dd>{user.lastModifiedBy}</dd>\r\n            <dt>Last Modified Date</dt>\r\n            <dd>\r\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            </dd>\r\n            <dt>Profiles</dt>\r\n            <dd>\r\n              <ul className=\"list-unstyled\">\r\n                {user.authorities\r\n                  ? user.authorities.map((authority, i) => (\r\n                      <li key={`user-auth-${i}`}>\r\n                        <Badge color=\"info\">{authority}</Badge>\r\n                      </li>\r\n                    ))\r\n                  : null}\r\n              </ul>\r\n            </dd>\r\n          </dl>\r\n        </Row>\r\n        <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n          <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\">Back</span>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user\r\n});\r\n\r\nconst mapDispatchToProps = { getUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementDetail);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IUser } from 'app/shared/model/user.model';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport interface IUserManagementUpdateState {\r\n  isNew: boolean;\r\n}\r\n\r\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\r\n  state: IUserManagementUpdateState = {\r\n    isNew: !this.props.match.params || !this.props.match.params.login\r\n  };\r\n\r\n  componentDidMount() {\r\n    !this.state.isNew && this.props.getUser(this.props.match.params.login);\r\n    this.props.getRoles();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  saveUser = (event, values) => {\r\n    if (this.state.isNew) {\r\n      this.props.createUser(values);\r\n    } else {\r\n      this.props.updateUser(values);\r\n    }\r\n    this.handleClose();\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/admin/user-management');\r\n  };\r\n\r\n  render() {\r\n    const isInvalid = false;\r\n    const { user, loading, updating, roles } = this.props;\r\n    const { isNew } = this.state;\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h1>Create or edit a User</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm onValidSubmit={this.saveUser}>\r\n                {user.id ? (\r\n                  <AvGroup>\r\n                    <Label for=\"id\">ID</Label>\r\n                    <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label for=\"login\">Login</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"login\"\r\n                    validate={{\r\n                      required: {\r\n                        value: true,\r\n                        errorMessage: 'Your username is required.'\r\n                      },\r\n                      pattern: {\r\n                        value: '^[_.@A-Za-z0-9-]*$',\r\n                        errorMessage: 'Your username can only contain letters and digits.'\r\n                      },\r\n                      minLength: {\r\n                        value: 1,\r\n                        errorMessage: 'Your username is required to be at least 1 character.'\r\n                      },\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'Your username cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.login}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"firstName\">First Name</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    validate={{\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'This field cannot be longer than {{ max }} characters.'\r\n                      }\r\n                    }}\r\n                    value={user.firstName}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"lastName\">Last Name</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    validate={{\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'This field cannot be longer than {{ max }} characters.'\r\n                      }\r\n                    }}\r\n                    value={user.lastName}\r\n                  />\r\n                  <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <AvField\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    placeholder=\"Your email\"\r\n                    type=\"email\"\r\n                    validate={{\r\n                      required: {\r\n                        value: true,\r\n                        errorMessage: 'Your email is required.'\r\n                      },\r\n                      email: {\r\n                        errorMessage: 'Your email is invalid.'\r\n                      },\r\n                      minLength: {\r\n                        value: 5,\r\n                        errorMessage: 'Your email is required to be at least 5 characters.'\r\n                      },\r\n                      maxLength: {\r\n                        value: 254,\r\n                        errorMessage: 'Your email cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.email}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup check>\r\n                  <Label>\r\n                    <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} /> Activated\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"authorities\">Language Key</Label>\r\n                  <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\r\n                    {roles.map(role => (\r\n                      <option value={role} key={role}>\r\n                        {role}\r\n                      </option>\r\n                    ))}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\r\n                  <span className=\"d-none d-md-inline\">Back</span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n  roles: storeState.userManagement.authorities,\r\n  loading: storeState.userManagement.loading,\r\n  updating: storeState.userManagement.updating\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementUpdate);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport {\r\n  ICrudGetAllAction,\r\n  ICrudPutAction,\r\n  TextFormat,\r\n  JhiPagination,\r\n  getPaginationItemsNumber,\r\n  getSortState,\r\n  IPaginationBaseState\r\n} from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationBaseState> {\r\n  state: IPaginationBaseState = {\r\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUsers();\r\n  }\r\n\r\n  sort = prop => () => {\r\n    this.setState(\r\n      {\r\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n        sort: prop\r\n      },\r\n      () => this.sortUsers()\r\n    );\r\n  };\r\n\r\n  sortUsers() {\r\n    this.getUsers();\r\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n  }\r\n\r\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\r\n\r\n  getUsers = () => {\r\n    const { activePage, itemsPerPage, sort, order } = this.state;\r\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\r\n  };\r\n\r\n  toggleActive = user => () => {\r\n    this.props.updateUser({\r\n      ...user,\r\n      activated: !user.activated\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { users, account, match, totalItems } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 className=\"userManagement-page-heading\">\r\n          Users\r\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\r\n            <FontAwesomeIcon icon=\"plus\" /> Create a new user\r\n          </Link>\r\n        </h2>\r\n        <Table responsive striped>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"hand\" onClick={this.sort('id')}>\r\n                ID<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('login')}>\r\n                Login<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('email')}>\r\n                Email<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th />\r\n              <th>Profiles</th>\r\n              <th className=\"hand\" onClick={this.sort('createdDate')}>\r\n                Created Date<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('lastModifiedBy')}>\r\n                Last Modified By<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('lastModifiedDate')}>\r\n                Last Modified Date<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user, i) => (\r\n              <tr id={user.login} key={`user-${i}`}>\r\n                <td>\r\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\r\n                    {user.id}\r\n                  </Button>\r\n                </td>\r\n                <td>{user.login}</td>\r\n                <td>{user.email}</td>\r\n                <td>\r\n                  {user.activated ? (\r\n                    <Button color=\"success\" onClick={this.toggleActive(user)}>\r\n                      Activated\r\n                    </Button>\r\n                  ) : (\r\n                    <Button color=\"danger\" onClick={this.toggleActive(user)}>\r\n                      Deactivated\r\n                    </Button>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {user.authorities\r\n                    ? user.authorities.map((authority, j) => (\r\n                        <div key={`user-auth-${i}-${j}`}>\r\n                          <Badge color=\"info\">{authority}</Badge>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </td>\r\n                <td>\r\n                  <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                </td>\r\n                <td>{user.lastModifiedBy}</td>\r\n                <td>\r\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                </td>\r\n                <td className=\"text-right\">\r\n                  <div className=\"btn-group flex-btn-group-container\">\r\n                    <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\r\n                      <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\">View</span>\r\n                    </Button>\r\n                    <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\r\n                      <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\r\n                    </Button>\r\n                    <Button\r\n                      tag={Link}\r\n                      to={`${match.url}/${user.login}/delete`}\r\n                      color=\"danger\"\r\n                      size=\"sm\"\r\n                      disabled={account.login === user.login}\r\n                    >\r\n                      <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\">Delete</span>\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiPagination\r\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\r\n            activePage={this.state.activePage}\r\n            onSelect={this.handlePagination}\r\n            maxButtons={5}\r\n          />\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  users: storeState.userManagement.users,\r\n  totalItems: storeState.userManagement.totalItems,\r\n  account: storeState.authentication.account\r\n});\r\n\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagement);\r\n","export const ITEMS_PER_PAGE = 20;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAuDA;AAhGA;AACA;AACA;AAyCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AAEA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;;AA2EA;AAtGA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAEA;AACA;AAGA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAkDA;AA/EA;AACA;AACA;AA6BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AATA;AAoBA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAkFA;AAxGA;AACA;AACA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AAEA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;;AAoFA;AAlFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAGA;AACA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAHA;AASA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AAEA;AACA;;AACA;;AACA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AAGA;AACA;;AACA;;AAKA;AACA;AAMA;AACA;AAOA;AACA;AAMA;AAGA;AACA;;AAAA;;AAAA;AACA;AACA;AAEA;AACA;;AAAA;AAEA;AAOA;AACA;AAMA;AAEA;AACA;;AAAA;AACA;AACA;AAOA;AACA;AAMA;AAEA;AACA;;AAAA;AACA;AACA;AAOA;AACA;AAMA;AAEA;AACA;;AAAA;AACA;AACA;AAOA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;;AA8YA;AAznBA;AACA;AACA;AAgPA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;;AACA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAQA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAOA;AACA;AACA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAQA;AACA;AAgBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAGA;AAMA;AAGA;AACA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAeA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9pBA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA8BA;AA5BA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAAA;AACA;;AACA;;AAAA;AACA;AALA;AAQA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAEA;AAGA;AAKA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAmBA;AA/BA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAAA;AAAA;;AAyDA;AAxDA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;;AAAA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AAEA;AAGA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA2IA;AA/JA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;;AACA;;AAGA;AACA;AACA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AA6GA;AA5IA;AACA;AACA;AAYA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAWA;AAEA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AAOA;;AAAA;AAQA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACtLA;AAAA;AAAA;AACA;AACA;;;;;;A","sourceRoot":""}